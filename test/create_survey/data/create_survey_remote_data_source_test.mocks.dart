// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_survey_app_mobile/test/create_survey/data/create_survey_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:flutter_survey_app_mobile/core/connection/network_info.dart'
    as _i3;
import 'package:flutter_survey_app_mobile/product/firebase/model/base_firebase_model.dart'
    as _i4;
import 'package:flutter_survey_app_mobile/product/firebase/service/base_firebase_service.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [INetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockINetworkInfo extends _i1.Mock implements _i3.INetworkInfo {
  MockINetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<bool> get currentConnectivityResult => (super.noSuchMethod(
        Invocation.getter(#currentConnectivityResult),
        returnValue: _i2.Future<bool>.value(false),
      ) as _i2.Future<bool>);
}

/// A class which mocks [BaseFirebaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseFirebaseService<T extends _i4.BaseFirebaseModel<T>>
    extends _i1.Mock implements _i5.BaseFirebaseService<T> {
  MockBaseFirebaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<void> setItem(
    String? collectionPath,
    T? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setItem,
          [
            collectionPath,
            item,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> updateItem(
    String? collectionPath,
    String? docId,
    T? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateItem,
          [
            collectionPath,
            docId,
            item,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteItem(
    String? collectionPath,
    String? docId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteItem,
          [
            collectionPath,
            docId,
          ],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> deleteSubCollections(List<String>? subCollections) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSubCollections,
          [subCollections],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<T> getItem({
    required String? collectionPath,
    required String? docId,
    required T? model,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [],
          {
            #collectionPath: collectionPath,
            #docId: docId,
            #model: model,
          },
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #getItem,
                  [],
                  {
                    #collectionPath: collectionPath,
                    #docId: docId,
                    #model: model,
                  },
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #getItem,
                [],
                {
                  #collectionPath: collectionPath,
                  #docId: docId,
                  #model: model,
                },
              ),
            ),
      ) as _i2.Future<T>);
}
